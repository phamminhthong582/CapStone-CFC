// <auto-generated />
using System;
using BusinessObject.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(CustomFlowerChainContext))]
    [Migration("20250111063841_FlowerCustom")]
    partial class FlowerCustom
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Feedback")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CommentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Distrist")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Full Name");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Otp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Delivery", b =>
                {
                    b.Property<Guid>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Fee")
                        .HasColumnType("float");

                    b.Property<bool?>("FreeShip")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("DeliveryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShipperId");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("IdentificationBackOfPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationFontOfPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripstion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Flower", b =>
                {
                    b.Property<Guid>("FlowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Sold")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("FlowerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Flower", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.FlowerBasket", b =>
                {
                    b.Property<Guid>("FlowerBasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Feature")
                        .HasColumnType("bit");

                    b.Property<string>("FlowerBasketName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Sold")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("FlowerBasketId");

                    b.HasIndex("StoreId");

                    b.ToTable("FlowerBasket", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.FlowerCustom", b =>
                {
                    b.Property<Guid>("FlowerCustomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("FlowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProductCustomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("FlowerCustomId");

                    b.HasIndex("FlowerId");

                    b.HasIndex("ProductCustomId");

                    b.ToTable("FlowerCustom", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ProductCustomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PromotionID");

                    b.Property<bool?>("Refund")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Transfer")
                        .HasColumnType("bit")
                        .HasColumnName("transfer");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId")
                        .HasName("PK_Table_1");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductCustomId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("StaffId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderID");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("ProductTotalPrice")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StoreId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<bool?>("Featured")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Sold")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProductId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductCustom", b =>
                {
                    b.Property<Guid>("ProductCustomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FlowerBasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProductCustomId");

                    b.HasIndex("FlowerBasketId");

                    b.ToTable("ProductCustom", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductImage1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProductImage");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProductImageId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Promotion", b =>
                {
                    b.Property<Guid>("PromtionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PromotionCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("PromotionDiscount")
                        .HasColumnType("float");

                    b.Property<string>("PromotionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("PromtionId");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Refund", b =>
                {
                    b.Property<Guid>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("WallerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefundId");

                    b.HasIndex("OrderId");

                    b.HasIndex("WallerId");

                    b.ToTable("Refund", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Store", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StoreAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StoreName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StorePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("StoreId");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Status")
                        .HasColumnType("datetime");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("WalletId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.WithdrawMoney", b =>
                {
                    b.Property<Guid>("WithdrawMoneyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BankNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Otp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Status")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WithdrawMoneyId");

                    b.HasIndex("WalletId");

                    b.ToTable("WithdrawMoney", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.Customer", b =>
                {
                    b.HasOne("BusinessObject.Entities.Store", "Store")
                        .WithMany("Customers")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Customer_Store");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BusinessObject.Entities.Delivery", b =>
                {
                    b.HasOne("BusinessObject.Entities.Order", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Delivery_Order");

                    b.HasOne("BusinessObject.Entities.Employee", "Shipper")
                        .WithMany("Deliveries")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("FK_Delivery_Employee");

                    b.Navigation("Order");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("BusinessObject.Entities.Employee", b =>
                {
                    b.HasOne("BusinessObject.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Employee_Role");

                    b.HasOne("BusinessObject.Entities.Store", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Employee_Store");

                    b.Navigation("Role");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BusinessObject.Entities.Feedback", b =>
                {
                    b.HasOne("BusinessObject.Entities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Feedback_Customer");

                    b.HasOne("BusinessObject.Entities.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Feedback_Order");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Entities.Flower", b =>
                {
                    b.HasOne("BusinessObject.Entities.Category", "Category")
                        .WithMany("Flowers")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Flower_Category");

                    b.HasOne("BusinessObject.Entities.Store", "Store")
                        .WithMany("Flowers")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Flower_Store");

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BusinessObject.Entities.FlowerBasket", b =>
                {
                    b.HasOne("BusinessObject.Entities.Store", "Store")
                        .WithMany("FlowerBaskets")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_FlowerBasket_Store");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BusinessObject.Entities.FlowerCustom", b =>
                {
                    b.HasOne("BusinessObject.Entities.Flower", "Flower")
                        .WithMany("FlowerCustoms")
                        .HasForeignKey("FlowerId")
                        .HasConstraintName("FK_FlowerCustom_Flower");

                    b.HasOne("BusinessObject.Entities.ProductCustom", "ProductCustom")
                        .WithMany("FlowerCustoms")
                        .HasForeignKey("ProductCustomId")
                        .HasConstraintName("FK_FlowerCustom_ProductCustom");

                    b.Navigation("Flower");

                    b.Navigation("ProductCustom");
                });

            modelBuilder.Entity("BusinessObject.Entities.Order", b =>
                {
                    b.HasOne("BusinessObject.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("BusinessObject.Entities.ProductCustom", "ProductCustom")
                        .WithMany("Orders")
                        .HasForeignKey("ProductCustomId")
                        .HasConstraintName("FK_Order_ProductCustom1");

                    b.HasOne("BusinessObject.Entities.Promotion", "Promotion")
                        .WithMany("Orders")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_Order_Promotion");

                    b.HasOne("BusinessObject.Entities.Employee", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Order_Employee");

                    b.Navigation("Customer");

                    b.Navigation("ProductCustom");

                    b.Navigation("Promotion");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BusinessObject.Entities.OrderDetail", b =>
                {
                    b.HasOne("BusinessObject.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Entities.Payment", b =>
                {
                    b.HasOne("BusinessObject.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Payment_Customer");

                    b.HasOne("BusinessObject.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Payment_Order");

                    b.HasOne("BusinessObject.Entities.Store", "Store")
                        .WithMany("Payments")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Payment_Store");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductCustom", b =>
                {
                    b.HasOne("BusinessObject.Entities.FlowerBasket", "FlowerBasket")
                        .WithMany("ProductCustoms")
                        .HasForeignKey("FlowerBasketId")
                        .HasConstraintName("FK_ProductCustom_FlowerBasket");

                    b.Navigation("FlowerBasket");
                });

            modelBuilder.Entity("BusinessObject.Entities.Refund", b =>
                {
                    b.HasOne("BusinessObject.Entities.Order", "Order")
                        .WithMany("Refunds")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Refund_Order");

                    b.HasOne("BusinessObject.Entities.Wallet", "Waller")
                        .WithMany("Refunds")
                        .HasForeignKey("WallerId")
                        .HasConstraintName("FK_Refund_Wallet");

                    b.Navigation("Order");

                    b.Navigation("Waller");
                });

            modelBuilder.Entity("BusinessObject.Entities.Wallet", b =>
                {
                    b.HasOne("BusinessObject.Entities.Customer", "Customer")
                        .WithMany("Wallets")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Wallet_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.Entities.WithdrawMoney", b =>
                {
                    b.HasOne("BusinessObject.Entities.Refund", "Wallet")
                        .WithMany("WithdrawMoneys")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("FK_WithdrawMoney_Refund");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BusinessObject.Entities.Category", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("BusinessObject.Entities.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("BusinessObject.Entities.Employee", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Entities.Flower", b =>
                {
                    b.Navigation("FlowerCustoms");
                });

            modelBuilder.Entity("BusinessObject.Entities.FlowerBasket", b =>
                {
                    b.Navigation("ProductCustoms");
                });

            modelBuilder.Entity("BusinessObject.Entities.Order", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductCustom", b =>
                {
                    b.Navigation("FlowerCustoms");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Entities.Promotion", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Entities.Refund", b =>
                {
                    b.Navigation("WithdrawMoneys");
                });

            modelBuilder.Entity("BusinessObject.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BusinessObject.Entities.Store", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("FlowerBaskets");

                    b.Navigation("Flowers");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BusinessObject.Entities.Wallet", b =>
                {
                    b.Navigation("Refunds");
                });
#pragma warning restore 612, 618
        }
    }
}
